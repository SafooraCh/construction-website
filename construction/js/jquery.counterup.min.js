(function ($) {
  "use strict";

  $.fn.counterUp = function (options) {
    var settings = $.extend({ time: 400, delay: 10 }, options);

    return this.each(function () {
      var $this = $(this);
      var config = settings;

      var counterFn = function () {
        var nums = [];
        var divisions = config.time / config.delay;
        var value = $this.text();
        var isComma = /[0-9]+,[0-9]+/.test(value);

        value = value.replace(/,/g, "");

        var isInt = /^[0-9]+$/.test(value);
        var isFloat = /^[0-9]+\.[0-9]+$/.test(value);
        var decimalPlaces = isFloat ? (value.split(".")[1] || []).length : 0;

        for (var i = divisions; i >= 1; i--) {
          var newValue = parseInt((value / divisions) * i);

          if (isFloat) {
            newValue = parseFloat((value / divisions) * i).toFixed(
              decimalPlaces
            );
          }

          if (isComma) {
            while (/(\d+)(\d{3})/.test(newValue.toString())) {
              newValue = newValue.toString().replace(/(\d+)(\d{3})/, "$1,$2");
            }
          }

          nums.unshift(newValue);
        }

        $this.data("counterup-nums", nums);
        $this.text("0");

        var f = function () {
          $this.text($this.data("counterup-nums").shift());
          if ($this.data("counterup-nums").length) {
            setTimeout($this.data("counterup-func"), config.delay);
          } else {
            delete $this.data("counterup-nums");
            $this.data("counterup-nums", null);
            $this.data("counterup-func", null);
          }
        };

        $this.data("counterup-func", f);
        setTimeout($this.data("counterup-func"), config.delay);
      };

      $this.waypoint(counterFn, { offset: "100%", triggerOnce: true });
    });
  };
})(jQuery);
